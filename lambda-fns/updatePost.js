"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updatePost(post, username) {
    let params = {
        TableName: process.env.POST_TABLE,
        Key: {
            id: post.id
        },
        UpdateExpression: "",
        ConditionExpression: "#owner = :owner",
        ExpressionAttributeNames: {
            "#owner": "owner"
        },
        ExpressionAttributeValues: {
            ':owner': username
        },
        ReturnValues: "UPDATED_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(post);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = post[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    try {
        await docClient.update(params).promise();
        return post;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updatePost;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlUG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVBvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFBO0FBWW5ELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUyxFQUFFLFFBQWdCO0lBQ25ELElBQUksTUFBTSxHQUFZO1FBQ3BCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDakMsR0FBRyxFQUFFO1lBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1NBQ1o7UUFDRCxnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLG1CQUFtQixFQUFFLGlCQUFpQjtRQUN0Qyx3QkFBd0IsRUFBRTtZQUN4QixRQUFRLEVBQUUsT0FBTztTQUNsQjtRQUNELHlCQUF5QixFQUFFO1lBQ3pCLFFBQVEsRUFBRyxRQUFRO1NBQ3BCO1FBQ0QsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQTtJQUNELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUM1RSxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDaEUsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNmO0tBQ0Y7SUFDRCxJQUFJO1FBQ0YsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3hDLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUFFRCxrQkFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJylcbmNvbnN0IGRvY0NsaWVudCA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKVxuXG50eXBlIFBhcmFtcyA9IHtcbiAgVGFibGVOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIEtleTogc3RyaW5nIHwge30sXG4gIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueSxcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBhbnksXG4gIENvbmRpdGlvbkV4cHJlc3Npb246IHN0cmluZyxcbiAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nLFxuICBSZXR1cm5WYWx1ZXM6IHN0cmluZyxcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlUG9zdChwb3N0OiBhbnksIHVzZXJuYW1lOiBzdHJpbmcpIHtcbiAgbGV0IHBhcmFtcyA6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlBPU1RfVEFCTEUsXG4gICAgS2V5OiB7XG4gICAgICBpZDogcG9zdC5pZFxuICAgIH0sXG4gICAgVXBkYXRlRXhwcmVzc2lvbjogXCJcIixcbiAgICBDb25kaXRpb25FeHByZXNzaW9uOiBcIiNvd25lciA9IDpvd25lclwiLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgXCIjb3duZXJcIjogXCJvd25lclwiXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAnOm93bmVyJyA6IHVzZXJuYW1lXG4gICAgfSxcbiAgICBSZXR1cm5WYWx1ZXM6IFwiVVBEQVRFRF9ORVdcIlxuICB9XG4gIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhwb3N0KTtcbiAgZm9yIChsZXQgaT0wOyBpPGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICBpZiAoYXR0cmlidXRlICE9PSBcImlkXCIpIHtcbiAgICAgIHBhcmFtc1tcIlVwZGF0ZUV4cHJlc3Npb25cIl0gKz0gcHJlZml4ICsgXCIjXCIgKyBhdHRyaWJ1dGUgKyBcIiA9IDpcIiArIGF0dHJpYnV0ZTtcbiAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIl1bXCI6XCIgKyBhdHRyaWJ1dGVdID0gcG9zdFthdHRyaWJ1dGVdO1xuICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzXCJdW1wiI1wiICsgYXR0cmlidXRlXSA9IGF0dHJpYnV0ZTtcbiAgICAgIHByZWZpeCA9IFwiLCBcIjtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2NDbGllbnQudXBkYXRlKHBhcmFtcykucHJvbWlzZSgpXG4gICAgcmV0dXJuIHBvc3RcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1cGRhdGVQb3N0Il19